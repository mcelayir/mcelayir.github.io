<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-05-31T10:40:41+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your awesome title</title><subtitle>My personal blog to keep things that I've learned in one place</subtitle><entry><title type="html">Start building your scala project with CircleCi</title><link href="http://localhost:4000/posts/2019/05/31/sbt-circleci-integration.html" rel="alternate" type="text/html" title="Start building your scala project with CircleCi" /><published>2019-05-31T00:00:00+02:00</published><updated>2019-05-31T00:00:00+02:00</updated><id>http://localhost:4000/posts/2019/05/31/sbt-circleci-integration</id><content type="html" xml:base="http://localhost:4000/posts/2019/05/31/sbt-circleci-integration.html">&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;

&lt;p&gt;This tutorial is intended to give brief information about &lt;b&gt;circleci&lt;/b&gt;, integrating
&lt;b&gt;circleci&lt;/b&gt; with your scala project to automate and orchestrate your builds.&lt;/p&gt;

&lt;h1 id=&quot;circleci&quot;&gt;CircleCi&lt;/h1&gt;

&lt;h2 id=&quot;what-is-continuous-integration-ci&quot;&gt;What is continuous integration (CI)&lt;/h2&gt;

&lt;p&gt;Continuous integration (CI) is a practice that requires developers to commit
and integrate their codes into a central repository. Instead of building
and verifying the integrity in an isolated system, the integrated code built
and verified by each commit. This allows teams to detect problems and take
actions early.&lt;/p&gt;

&lt;h2 id=&quot;what-is-circleci&quot;&gt;What is CircleCi&lt;/h2&gt;

&lt;p&gt;As you can guess from the context, &lt;b&gt;circleci&lt;/b&gt; is yet another CI service that
you can make use of.&lt;/p&gt;

&lt;p&gt;With &lt;b&gt;circleci&lt;/b&gt; you can utilize CI in your development process easily. As you will
later see in this tutorial, you can spin up everything with a simple yml file.
You can configure workflows and orchestrate them in various ways depending
on your requirements. In a nutshell you can do:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt; Compile and test your code &lt;/li&gt;
    &lt;li&gt; Schedule your jobs &lt;/li&gt;
    &lt;li&gt; Create custom workflows and pipelines &lt;/li&gt;
    &lt;li&gt; Orchestrate your jobs &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Key features for &lt;b&gt;circleci&lt;/b&gt; can be described as:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt; No dedicated servers and administration needed &lt;/li&gt;
    &lt;li&gt; Has a free plan &lt;/li&gt;
    &lt;li&gt; Nice cli to run tasks locally &lt;/li&gt;
    &lt;li&gt; Rest api to access projects, builds and artifacts &lt;/li&gt;
    &lt;li&gt; Easy configuration &lt;/li&gt;
    &lt;li&gt; VCS integration &lt;/li&gt;
    &lt;li&gt; Community support &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;configuration&quot;&gt;Configuration&lt;/h1&gt;

&lt;p&gt;CircleCI 2.0 requires &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yml&lt;/code&gt; file to be under
&lt;code class=&quot;highlighter-rouge&quot;&gt;.circleci&lt;/code&gt; directory which should be under the projects root directory
So the file location should follow &lt;code class=&quot;highlighter-rouge&quot;&gt;.circleci/config.yml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To achieve that you can execute following commands in your projects root
directory.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; mkdir .circleci/
&amp;gt; touch .circleci/config.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;configyml&quot;&gt;config.yml&lt;/h2&gt;

&lt;h3 id=&quot;version&quot;&gt;version&lt;/h3&gt;

&lt;p&gt;Circleci config.yml should specify its version in the beginning of the file
so we start with stating the version.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;jobs--build&quot;&gt;jobs &amp;amp; build&lt;/h3&gt;

&lt;p&gt;Before defining the steps that we want to run, first we have to configure circeci
with an entry point and a job to run. For providing endpoint, we can use
&lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; keyword and we can create jobs to run under the keyword &lt;code class=&quot;highlighter-rouge&quot;&gt;jobs&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;configuring-jobs&quot;&gt;Configuring jobs&lt;/h2&gt;

&lt;h3 id=&quot;defining-docker-images&quot;&gt;Defining docker images&lt;/h3&gt;

&lt;p&gt;Docker images needed for the job can be defined under &lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt;section as
shown below. Given images will be pulled by circleci.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  jobs:
    build:
        docker:
            - image: &amp;lt;&amp;lt;image-name&amp;gt;&amp;gt;
            - image: &amp;lt;&amp;lt;image-name&amp;gt;&amp;gt;
            ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since we are going to build a sbt project, we can use official docker
image for &lt;code class=&quot;highlighter-rouge&quot;&gt;openjdk8&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  jobs:
    build:
        docker:
            - image: openjdk:8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;defining-environment-variables&quot;&gt;Defining environment variables&lt;/h3&gt;

&lt;p&gt;Values that you want to use during the execution of the job 
should be defined under &lt;code class=&quot;highlighter-rouge&quot;&gt;environment&lt;/code&gt; section as shown below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jobs:
    build:
        environment:
            - MY_VAR_1: &amp;lt;&amp;lt;some-value&amp;gt;&amp;gt;
            - MY_VAR_2: &amp;lt;&amp;lt;some-value&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since we need sbt, we can set the version that we want to download 
as an environment variable. (yes we are going to download that :sweat_smile:)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jobs:
    build:
        environment:
            - SBT_VERSION: 1.2.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;setting-up-steps&quot;&gt;Setting up steps&lt;/h3&gt;

&lt;p&gt;We can define each command that we want to run under &lt;code class=&quot;highlighter-rouge&quot;&gt;steps&lt;/code&gt; section.
Commands can be defined by &lt;code class=&quot;highlighter-rouge&quot;&gt;run keyword&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jobs:
    build:
        steps:
            - run: &amp;lt;&amp;lt;command&amp;gt;&amp;gt;
            - run: &amp;lt;&amp;lt;command&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also a name can be defined for a command alongside the actual command.&lt;/p&gt;

&lt;p&gt;Multiline commands can be defined by using a pipe &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; at the beginning
of the command&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jobs:
    build:
        steps:
            - run: 
                name: Say hello
                command: |
                          apt update &amp;amp;&amp;amp; apt install -y curl
                          apt-get update
                          apt-get install -y sbt python-pip git
                          ....                        
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All the given commands will run inside the docker container for the job.&lt;/p&gt;

&lt;p&gt;Now we can start defining the steps needed to compile and execute other
commands for our project.&lt;/p&gt;

&lt;h3 id=&quot;installing-the-sbt&quot;&gt;Installing the sbt&lt;/h3&gt;

&lt;p&gt;Right now we have an empty container and to run our jobs we have to install
the tools that we need.&lt;/p&gt;

&lt;p&gt;To install the sbt, first we have to install curl to be able to make rest
calls. By using curl we are going to download the binary for sbt and install it
We can define all the commands in one step by using the pipe &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; as described
above&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;steps:
    - run:
        name: Get sbt binary
        command: |
                 apt update &amp;amp;&amp;amp; apt install -y curl
                 curl -L -o sbt-$SBT_VERSION.deb https://dl.bintray.com/sbt/debian/sbt-$SBT_VERSION.deb
                 dpkg -i sbt-$SBT_VERSION.deb
                 rm sbt-$SBT_VERSION.deb

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One thing to notice here is that, we read the version value from the environment
variable that we defined earlier by saying &lt;code class=&quot;highlighter-rouge&quot;&gt;$SBT_VERSION&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;checking-out-the-code&quot;&gt;Checking out the code&lt;/h3&gt;

&lt;p&gt;For circleci to git checkout our code we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;- checkout&lt;/code&gt; keyword
as a step. The project will be cloned into container&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;steps:
    - run: ...
    - run: ...
    - checkout  
    ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;running-sbt-commands&quot;&gt;Running sbt commands&lt;/h3&gt;

&lt;p&gt;Now we have our code ready and sbt installed, we can define the steps to 
clean, compile and test our project&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;steps:
    - run:
        name: Clean
        command: sbt clean
    - run:
        name: Compile
        command: sbt compile
    - run:
        name: Test
        command: sbt test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;setting-up-your-build-on-circleci&quot;&gt;Setting up your build on circleci&lt;/h3&gt;

&lt;p&gt;Up to now, our &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yml&lt;/code&gt; should look like this.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: 2
jobs:
  build:
    docker:
    - image: openjdk:8
    environment:
    - SBT_VERSION: 1.2.8
    steps:
    - run:
        name: Get sbt binary
        command: |
          apt update &amp;amp;&amp;amp; apt install -y curl
          curl -L -o sbt-$SBT_VERSION.deb https://dl.bintray.com/sbt/debian/sbt-$SBT_VERSION.deb
          dpkg -i sbt-$SBT_VERSION.deb
          rm sbt-$SBT_VERSION.deb
    - checkout
    - run:
        name: Clean
        command: sbt clean
    - run:
        name: Compile
        command: sbt compile
    - run:
        name: Test
        command: sbt test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this point I assume that you have a github repository for your project. If you
don’t then create one and push your code to that repository.&lt;/p&gt;

&lt;p&gt;Now, navigate to &lt;a&gt;https://circleci.com&lt;/a&gt; and signup. You can also select
&lt;code class=&quot;highlighter-rouge&quot;&gt;Start with github&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;Go to add project section. Be sure that your github account is selected in 
the dropdown on the top-left of the page. You can click the &lt;code class=&quot;highlighter-rouge&quot;&gt;Set Up Project&lt;/code&gt;
button next the project that you want to select.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.eu-central-1.amazonaws.com/tutorial.assets/circleci/circleci-select-project.png&quot; alt=&quot;Select project&quot; style=&quot;float: left; margin-right: 10px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the next page, you will see circleci will try to give you a config.yml file
and instructions to add the file to your project (that’s why circleci is the man).
Since we have configuration ready, we can click on &lt;code class=&quot;highlighter-rouge&quot;&gt;Start Building&lt;/code&gt; button
which truely reflects our purpose.&lt;/p&gt;

&lt;p&gt;After you select &lt;code class=&quot;highlighter-rouge&quot;&gt;Start Building&lt;/code&gt; circleci will trigger the build of your
project automatically and you will see your project built.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.eu-central-1.amazonaws.com/tutorial.assets/circleci/circleci-builds.png&quot; alt=&quot;Builds&quot; style=&quot;float: left; margin-right: 10px;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;introducing-workflows&quot;&gt;Introducing workflows&lt;/h1&gt;

&lt;p&gt;Right now we have a basic configuration to build and test our project but circleci
provides more. We can create workflows and compose them to achieve more.&lt;/p&gt;

&lt;p&gt;According to circleci, a workflow is
&lt;code class=&quot;highlighter-rouge&quot;&gt;a set of rules for defining a collection of jobs and their run order. 
Workflows support complex job orchestration using a simple set of configuration 
keys to help you resolve failures sooner.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With workflows, we can:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Run jobs independently&lt;/li&gt;
    &lt;li&gt;Schedule jobs&lt;/li&gt;
    &lt;li&gt;Orchestrate jobs&lt;/li&gt;
    &lt;li&gt;Configure different stages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So let’s start.&lt;/p&gt;

&lt;h2 id=&quot;creating-jobs&quot;&gt;Creating jobs&lt;/h2&gt;

&lt;p&gt;Previously we configured a job to build and test our application. We are
going to seperate them into two jobs and combine them in a workflow.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: 2
jobs:
  compile:
    docker:
    - image: openjdk:8
    environment:
    - SBT_VERSION: 1.2.8
    steps:
    - run:
        name: Get sbt binary
        command: |
          apt update &amp;amp;&amp;amp; apt install -y curl
          curl -L -o sbt-$SBT_VERSION.deb https://dl.bintray.com/sbt/debian/sbt-$SBT_VERSION.deb
          dpkg -i sbt-$SBT_VERSION.deb
          rm sbt-$SBT_VERSION.deb
    - checkout
    - run:
        name: Clean
        command: sbt clean
    - run:
        name: Compile
        command: sbt compile
  test:
    docker:
    - image: openjdk:8
    environment:
    - SBT_VERSION: 1.2.8
    steps:
    - run:
        name: Get sbt binary
        command: |
          apt update &amp;amp;&amp;amp; apt install -y curl
          curl -L -o sbt-$SBT_VERSION.deb https://dl.bintray.com/sbt/debian/sbt-$SBT_VERSION.deb
          dpkg -i sbt-$SBT_VERSION.deb
          rm sbt-$SBT_VERSION.deb
    - checkout
    - run:
        name: Test
        command: sbt test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that we had to download sbt and checkout the code for both jobs since the commands for the job will run in the job’s context and each job 
will run the commands in its own container. So seperating build and test for an sbt project does not make much sense.&lt;/p&gt;

&lt;h3 id=&quot;creating-a-sequential-workflow&quot;&gt;Creating a sequential workflow&lt;/h3&gt;

&lt;p&gt;A sequential workflow requires the previous step run and complete succesfully for the current step start running.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://circleci.com/docs/assets/img/docs/sequential_workflow.png&quot; alt=&quot;Sequential workflow&quot; style=&quot;float: left; margin-right: 10px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Each workflow requires a unique name and a map. In the map we can configure the jobs that we want to run, schedule 
the workflow using cron timers and so on. For more details you can check &lt;a href=&quot;https://circleci.com/docs/2.0/configuration-reference/#workflows&quot;&gt;workflow configuration
reference&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We can configure our workflow to execute build then test as following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;workflows:
    version: 2
    build-and-test:
        jobs:
            - compile
            - test:
                requires:
                    - compile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s observe the configuration&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; &lt;b&gt;workflows&lt;/b&gt; defines the section that the workflows are defined (suprisingly :sweat_smile:)&lt;/li&gt;
&lt;li&gt; &lt;b&gt;build-and-test&lt;/b&gt; is the name of our workflow&lt;/li&gt;
&lt;li&gt; &lt;b&gt;jobs&lt;/b&gt; are the section that we define our jobs for the workflow&lt;/li&gt;
&lt;li&gt; &lt;b&gt;compile&lt;/b&gt; job is configured as the first job to run in the workflow&lt;/li&gt;
&lt;li&gt; &lt;b&gt;test&lt;/b&gt; job is configured as the job which will start when the &lt;b&gt;compile&lt;/b&gt; job completes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After pushing your code, circleci will start executing your workflow
Navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;Workflows&lt;/code&gt; tab in circleci dashboard to see the result of your workflow&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.eu-central-1.amazonaws.com/tutorial.assets/circleci/circleci-workflow-build.png&quot; alt=&quot;Workflow result&quot; style=&quot;float: left; margin-right: 10px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;fan-inout-workflow-example&quot;&gt;Fan in/out workflow example&lt;/h3&gt;

&lt;p&gt;You may want to compose your workflow in a way that it will run some jobs sequentially and
some jobs in parallel. In this case you can take advantage of &lt;code class=&quot;highlighter-rouge&quot;&gt;Fan In/Out&lt;/code&gt; workflow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://circleci.com/docs/assets/img/docs/fan_in_out.png&quot; alt=&quot;Workflow result&quot; style=&quot;float: left; margin-right: 10px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To be more specific, let’s imagine a use case that you want to first compile your project,
then run some test in parallel and if all the tests pass successfully, you want to deploy your application.&lt;/p&gt;

&lt;p&gt;To do that, we can define a workflow like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;workflows:
    version: 2
    build-test-deploy:
        jobs:
            - compile
            - unit-test:
                requires:
                    - compile
            - integration-test:
                requires:
                    - compile
            - deploy:
                requires:
                    - unit-test
                    - integration-test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, as soon as the &lt;code class=&quot;highlighter-rouge&quot;&gt;compile&lt;/code&gt; job finishes, &lt;code class=&quot;highlighter-rouge&quot;&gt;unit-test&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;integration-test&lt;/code&gt; jobs will start.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy&lt;/code&gt; job must wait for all test jobs to complete successfully before it starts.&lt;/p&gt;

&lt;h1 id=&quot;creating-and-deploying-docker-images&quot;&gt;Creating and deploying docker images&lt;/h1&gt;

&lt;p&gt;As the last part of this tutorial, we are going to build a docker image for our project
and publish it to docker hub by using circleci.&lt;/p&gt;

&lt;p&gt;To create docker image for a sbt project, we are going to use &lt;code class=&quot;highlighter-rouge&quot;&gt;SBT Native Packager&lt;/code&gt;
plugin. To activate the plugin for your project, simply add the following line to
&lt;code class=&quot;highlighter-rouge&quot;&gt;plugins.sbt&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;addSbtPlugin(&quot;com.typesafe.sbt&quot; % &quot;sbt-native-packager&quot; % &quot;1.3.12&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that you have to enable plugins &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaAppPackaging&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DockerPlugin&lt;/code&gt; in your &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt;
file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enablePlugins(
    JavaAppPackaging,
    DockerPlugin
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s define the repository that we want our image to be pushed. To do that
add the following line to your project settings.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dockerRepository := Option(&quot;&amp;lt;&amp;lt;repository name&amp;gt;&amp;gt;&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can test the image creation by using the command&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sbt docker:publishLocal
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;adding-publish-job&quot;&gt;Adding publish job&lt;/h2&gt;

&lt;p&gt;Let’s add a new job to create and publish a docker image for our project.&lt;/p&gt;

&lt;p&gt;To build our docker image we need a docker engine. We can use&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- setup_remote_docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;command to tell circleci to create a remote docker engine for us and the container for the job will be 
configured to use it.&lt;/p&gt;

&lt;p&gt;After that, we need to install a docker client to be able to run docker commands like &lt;code class=&quot;highlighter-rouge&quot;&gt;login&lt;/code&gt;. Lets add the following 
step to our job to install docker client&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- run:
        name: Install Docker client
        command: |
          set -x
          VER=&quot;17.03.0-ce&quot;
          curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
          tar -xz -C /tmp -f /tmp/docker-$VER.tgz
          mv /tmp/docker/* /usr/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;OK, docker client installed and now we have to authenticate to be able to publish our image to docker hub. But wait
how can we supply our credentials for that. Are we going directly write our credentials to our config.yml and expose our 
credentials. Luckily circleci have a solution for that. You can define environment variables for your project.&lt;/p&gt;

&lt;p&gt;Simply navigate your project settings and select &lt;code class=&quot;highlighter-rouge&quot;&gt;Environment Variables&lt;/code&gt; under &lt;code class=&quot;highlighter-rouge&quot;&gt;Build Settings&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.eu-central-1.amazonaws.com/tutorial.assets/circleci/circleci-environment-variables.png&quot; alt=&quot;Environment variables&quot; style=&quot;float: left; margin-right: 10px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and add &lt;code class=&quot;highlighter-rouge&quot;&gt;DOCKER_USER&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DOCKER_PASS&lt;/code&gt; environment variables for your project. Then we can add the following command 
to login to docker.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- run:
        name: Docker login
        command: docker login -u $DOCKER_USER -p $DOCKER_PASS

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lastly, add the following command to invoke docker publish.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    - run:
        name: Publish docker artifacts
        command: sbt docker:publish

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;adding-to-workflow&quot;&gt;Adding to workflow&lt;/h3&gt;

&lt;p&gt;We need to add the publish job as the last job in the workflow. We can configure the publish job to run after
the test job completes.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;workflows:
  version: 2
  build-and-test-and-deploy:
    jobs:
    - compile
    - test:
        requires:
        - compile
    - publish:
        requires:
        - test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After pushing your code to repo, you can see the workflow successfully ran&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.eu-central-1.amazonaws.com/tutorial.assets/circleci/circleci-workflow-success.png&quot; alt=&quot;Workflow success&quot; style=&quot;float: left; margin-right: 10px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and docker image is published.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.eu-central-1.amazonaws.com/tutorial.assets/circleci/dockerhub.png&quot; alt=&quot;Docker hub&quot; style=&quot;float: left; margin-right: 10px;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a&gt;https://www.thoughtworks.com/continuous-integration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a&gt;https://circleci.com/docs/2.0/about-circleci/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a&gt;https://hackernoon.com/continuous-integration-circleci-vs-travis-ci-vs-jenkins-41a1c2bd95f5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a&gt;https://circleci.com/docs/2.0/language-scala/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a&gt;https://circleci.com/docs/2.0/tutorials/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Overview</summary></entry></feed>